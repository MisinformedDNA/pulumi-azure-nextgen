"use strict";
// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
const pulumi = require("@pulumi/pulumi");
const utilities = require("../../utilities");
/**
 * Peerings in a virtual network resource.
 */
class VirtualNetworkPeering extends pulumi.CustomResource {
    constructor(name, argsOrState, opts) {
        let inputs = {};
        if (!(opts && opts.id)) {
            const args = argsOrState;
            if (!args || args.resourceGroupName === undefined) {
                throw new Error("Missing required property 'resourceGroupName'");
            }
            if (!args || args.virtualNetworkName === undefined) {
                throw new Error("Missing required property 'virtualNetworkName'");
            }
            if (!args || args.virtualNetworkPeeringName === undefined) {
                throw new Error("Missing required property 'virtualNetworkPeeringName'");
            }
            inputs["allowForwardedTraffic"] = args ? args.allowForwardedTraffic : undefined;
            inputs["allowGatewayTransit"] = args ? args.allowGatewayTransit : undefined;
            inputs["allowVirtualNetworkAccess"] = args ? args.allowVirtualNetworkAccess : undefined;
            inputs["etag"] = args ? args.etag : undefined;
            inputs["id"] = args ? args.id : undefined;
            inputs["name"] = args ? args.name : undefined;
            inputs["peeringState"] = args ? args.peeringState : undefined;
            inputs["provisioningState"] = args ? args.provisioningState : undefined;
            inputs["remoteAddressSpace"] = args ? args.remoteAddressSpace : undefined;
            inputs["remoteVirtualNetwork"] = args ? args.remoteVirtualNetwork : undefined;
            inputs["resourceGroupName"] = args ? args.resourceGroupName : undefined;
            inputs["useRemoteGateways"] = args ? args.useRemoteGateways : undefined;
            inputs["virtualNetworkName"] = args ? args.virtualNetworkName : undefined;
            inputs["virtualNetworkPeeringName"] = args ? args.virtualNetworkPeeringName : undefined;
        }
        if (!opts) {
            opts = {};
        }
        if (!opts.version) {
            opts.version = utilities.getVersion();
        }
        const aliasOpts = { aliases: [{ type: "azurerm:network/v20160601:VirtualNetworkPeering" }, { type: "azurerm:network/v20160901:VirtualNetworkPeering" }, { type: "azurerm:network/v20161201:VirtualNetworkPeering" }, { type: "azurerm:network/v20170301:VirtualNetworkPeering" }, { type: "azurerm:network/v20170601:VirtualNetworkPeering" }, { type: "azurerm:network/v20170801:VirtualNetworkPeering" }, { type: "azurerm:network/v20170901:VirtualNetworkPeering" }, { type: "azurerm:network/v20171001:VirtualNetworkPeering" }, { type: "azurerm:network/v20171101:VirtualNetworkPeering" }, { type: "azurerm:network/v20180101:VirtualNetworkPeering" }, { type: "azurerm:network/v20180201:VirtualNetworkPeering" }, { type: "azurerm:network/v20180401:VirtualNetworkPeering" }, { type: "azurerm:network/v20180601:VirtualNetworkPeering" }, { type: "azurerm:network/v20180701:VirtualNetworkPeering" }, { type: "azurerm:network/v20180801:VirtualNetworkPeering" }, { type: "azurerm:network/v20181001:VirtualNetworkPeering" }, { type: "azurerm:network/v20181101:VirtualNetworkPeering" }, { type: "azurerm:network/v20181201:VirtualNetworkPeering" }, { type: "azurerm:network/v20190201:VirtualNetworkPeering" }, { type: "azurerm:network/v20190401:VirtualNetworkPeering" }, { type: "azurerm:network/v20190701:VirtualNetworkPeering" }, { type: "azurerm:network/v20190801:VirtualNetworkPeering" }, { type: "azurerm:network/v20190901:VirtualNetworkPeering" }, { type: "azurerm:network/v20191101:VirtualNetworkPeering" }, { type: "azurerm:network/v20191201:VirtualNetworkPeering" }, { type: "azurerm:network/v20200301:VirtualNetworkPeering" }, { type: "azurerm:network/v20200401:VirtualNetworkPeering" }, { type: "azurerm:network/v20200501:VirtualNetworkPeering" }, { type: "azurerm:network/v20200601:VirtualNetworkPeering" }] };
        opts = opts ? pulumi.mergeOptions(opts, aliasOpts) : aliasOpts;
        super(VirtualNetworkPeering.__pulumiType, name, inputs, opts);
    }
    /**
     * Get an existing VirtualNetworkPeering resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, opts) {
        return new VirtualNetworkPeering(name, undefined, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of VirtualNetworkPeering.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === VirtualNetworkPeering.__pulumiType;
    }
}
exports.VirtualNetworkPeering = VirtualNetworkPeering;
/** @internal */
VirtualNetworkPeering.__pulumiType = 'azurerm:network/v20190601:VirtualNetworkPeering';
//# sourceMappingURL=virtualNetworkPeering.js.map