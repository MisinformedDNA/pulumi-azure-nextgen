"use strict";
// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
const pulumi = require("@pulumi/pulumi");
const utilities = require("../../utilities");
/**
 * Information about a domain.
 */
class Domain extends pulumi.CustomResource {
    constructor(name, argsOrState, opts) {
        let inputs = {};
        if (!(opts && opts.id)) {
            const args = argsOrState;
            if (!args || args.consent === undefined) {
                throw new Error("Missing required property 'consent'");
            }
            if (!args || args.contactAdmin === undefined) {
                throw new Error("Missing required property 'contactAdmin'");
            }
            if (!args || args.contactBilling === undefined) {
                throw new Error("Missing required property 'contactBilling'");
            }
            if (!args || args.contactRegistrant === undefined) {
                throw new Error("Missing required property 'contactRegistrant'");
            }
            if (!args || args.contactTech === undefined) {
                throw new Error("Missing required property 'contactTech'");
            }
            if (!args || args.domainName === undefined) {
                throw new Error("Missing required property 'domainName'");
            }
            if (!args || args.location === undefined) {
                throw new Error("Missing required property 'location'");
            }
            if (!args || args.resourceGroupName === undefined) {
                throw new Error("Missing required property 'resourceGroupName'");
            }
            inputs["authCode"] = args ? args.authCode : undefined;
            inputs["autoRenew"] = args ? args.autoRenew : undefined;
            inputs["consent"] = args ? args.consent : undefined;
            inputs["contactAdmin"] = args ? args.contactAdmin : undefined;
            inputs["contactBilling"] = args ? args.contactBilling : undefined;
            inputs["contactRegistrant"] = args ? args.contactRegistrant : undefined;
            inputs["contactTech"] = args ? args.contactTech : undefined;
            inputs["dnsType"] = args ? args.dnsType : undefined;
            inputs["dnsZoneId"] = args ? args.dnsZoneId : undefined;
            inputs["domainName"] = args ? args.domainName : undefined;
            inputs["kind"] = args ? args.kind : undefined;
            inputs["location"] = args ? args.location : undefined;
            inputs["privacy"] = args ? args.privacy : undefined;
            inputs["resourceGroupName"] = args ? args.resourceGroupName : undefined;
            inputs["tags"] = args ? args.tags : undefined;
            inputs["targetDnsType"] = args ? args.targetDnsType : undefined;
            inputs["createdTime"] = undefined /*out*/;
            inputs["domainNotRenewableReasons"] = undefined /*out*/;
            inputs["expirationTime"] = undefined /*out*/;
            inputs["lastRenewedTime"] = undefined /*out*/;
            inputs["managedHostNames"] = undefined /*out*/;
            inputs["name"] = undefined /*out*/;
            inputs["nameServers"] = undefined /*out*/;
            inputs["provisioningState"] = undefined /*out*/;
            inputs["readyForDnsRecordManagement"] = undefined /*out*/;
            inputs["registrationStatus"] = undefined /*out*/;
            inputs["type"] = undefined /*out*/;
        }
        if (!opts) {
            opts = {};
        }
        if (!opts.version) {
            opts.version = utilities.getVersion();
        }
        const aliasOpts = { aliases: [{ type: "azurerm:domainregistration/v20150401:Domain" }, { type: "azurerm:domainregistration/v20150801:Domain" }, { type: "azurerm:domainregistration/v20180201:Domain" }, { type: "azurerm:domainregistration/v20200601:Domain" }] };
        opts = opts ? pulumi.mergeOptions(opts, aliasOpts) : aliasOpts;
        super(Domain.__pulumiType, name, inputs, opts);
    }
    /**
     * Get an existing Domain resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, opts) {
        return new Domain(name, undefined, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of Domain.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Domain.__pulumiType;
    }
}
exports.Domain = Domain;
/** @internal */
Domain.__pulumiType = 'azurerm:domainregistration/v20190801:Domain';
//# sourceMappingURL=domain.js.map