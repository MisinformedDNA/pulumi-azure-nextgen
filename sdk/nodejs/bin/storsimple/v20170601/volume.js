"use strict";
// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
const pulumi = require("@pulumi/pulumi");
const utilities = require("../../utilities");
/**
 * The volume.
 */
class Volume extends pulumi.CustomResource {
    constructor(name, argsOrState, opts) {
        let inputs = {};
        if (!(opts && opts.id)) {
            const args = argsOrState;
            if (!args || args.accessControlRecordIds === undefined) {
                throw new Error("Missing required property 'accessControlRecordIds'");
            }
            if (!args || args.deviceName === undefined) {
                throw new Error("Missing required property 'deviceName'");
            }
            if (!args || args.managerName === undefined) {
                throw new Error("Missing required property 'managerName'");
            }
            if (!args || args.monitoringStatus === undefined) {
                throw new Error("Missing required property 'monitoringStatus'");
            }
            if (!args || args.resourceGroupName === undefined) {
                throw new Error("Missing required property 'resourceGroupName'");
            }
            if (!args || args.sizeInBytes === undefined) {
                throw new Error("Missing required property 'sizeInBytes'");
            }
            if (!args || args.volumeContainerName === undefined) {
                throw new Error("Missing required property 'volumeContainerName'");
            }
            if (!args || args.volumeName === undefined) {
                throw new Error("Missing required property 'volumeName'");
            }
            if (!args || args.volumeStatus === undefined) {
                throw new Error("Missing required property 'volumeStatus'");
            }
            if (!args || args.volumeType === undefined) {
                throw new Error("Missing required property 'volumeType'");
            }
            inputs["accessControlRecordIds"] = args ? args.accessControlRecordIds : undefined;
            inputs["deviceName"] = args ? args.deviceName : undefined;
            inputs["kind"] = args ? args.kind : undefined;
            inputs["managerName"] = args ? args.managerName : undefined;
            inputs["monitoringStatus"] = args ? args.monitoringStatus : undefined;
            inputs["resourceGroupName"] = args ? args.resourceGroupName : undefined;
            inputs["sizeInBytes"] = args ? args.sizeInBytes : undefined;
            inputs["volumeContainerName"] = args ? args.volumeContainerName : undefined;
            inputs["volumeName"] = args ? args.volumeName : undefined;
            inputs["volumeStatus"] = args ? args.volumeStatus : undefined;
            inputs["volumeType"] = args ? args.volumeType : undefined;
            inputs["backupPolicyIds"] = undefined /*out*/;
            inputs["backupStatus"] = undefined /*out*/;
            inputs["name"] = undefined /*out*/;
            inputs["operationStatus"] = undefined /*out*/;
            inputs["type"] = undefined /*out*/;
            inputs["volumeContainerId"] = undefined /*out*/;
        }
        if (!opts) {
            opts = {};
        }
        if (!opts.version) {
            opts.version = utilities.getVersion();
        }
        super(Volume.__pulumiType, name, inputs, opts);
    }
    /**
     * Get an existing Volume resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, opts) {
        return new Volume(name, undefined, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of Volume.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Volume.__pulumiType;
    }
}
exports.Volume = Volume;
/** @internal */
Volume.__pulumiType = 'azurerm:storsimple/v20170601:Volume';
//# sourceMappingURL=volume.js.map