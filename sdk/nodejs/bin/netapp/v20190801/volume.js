"use strict";
// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
const pulumi = require("@pulumi/pulumi");
const utilities = require("../../utilities");
/**
 * Volume resource
 */
class Volume extends pulumi.CustomResource {
    constructor(name, argsOrState, opts) {
        let inputs = {};
        if (!(opts && opts.id)) {
            const args = argsOrState;
            if (!args || args.accountName === undefined) {
                throw new Error("Missing required property 'accountName'");
            }
            if (!args || args.creationToken === undefined) {
                throw new Error("Missing required property 'creationToken'");
            }
            if (!args || args.location === undefined) {
                throw new Error("Missing required property 'location'");
            }
            if (!args || args.poolName === undefined) {
                throw new Error("Missing required property 'poolName'");
            }
            if (!args || args.resourceGroupName === undefined) {
                throw new Error("Missing required property 'resourceGroupName'");
            }
            if (!args || args.subnetId === undefined) {
                throw new Error("Missing required property 'subnetId'");
            }
            if (!args || args.usageThreshold === undefined) {
                throw new Error("Missing required property 'usageThreshold'");
            }
            if (!args || args.volumeName === undefined) {
                throw new Error("Missing required property 'volumeName'");
            }
            inputs["accountName"] = args ? args.accountName : undefined;
            inputs["creationToken"] = args ? args.creationToken : undefined;
            inputs["dataProtection"] = args ? args.dataProtection : undefined;
            inputs["exportPolicy"] = args ? args.exportPolicy : undefined;
            inputs["location"] = args ? args.location : undefined;
            inputs["mountTargets"] = args ? args.mountTargets : undefined;
            inputs["poolName"] = args ? args.poolName : undefined;
            inputs["protocolTypes"] = args ? args.protocolTypes : undefined;
            inputs["resourceGroupName"] = args ? args.resourceGroupName : undefined;
            inputs["serviceLevel"] = args ? args.serviceLevel : undefined;
            inputs["snapshotId"] = args ? args.snapshotId : undefined;
            inputs["subnetId"] = args ? args.subnetId : undefined;
            inputs["tags"] = args ? args.tags : undefined;
            inputs["usageThreshold"] = args ? args.usageThreshold : undefined;
            inputs["volumeName"] = args ? args.volumeName : undefined;
            inputs["volumeType"] = args ? args.volumeType : undefined;
            inputs["baremetalTenantId"] = undefined /*out*/;
            inputs["fileSystemId"] = undefined /*out*/;
            inputs["name"] = undefined /*out*/;
            inputs["provisioningState"] = undefined /*out*/;
            inputs["type"] = undefined /*out*/;
        }
        if (!opts) {
            opts = {};
        }
        if (!opts.version) {
            opts.version = utilities.getVersion();
        }
        const aliasOpts = { aliases: [{ type: "azurerm:netapp/v20190501:Volume" }, { type: "azurerm:netapp/v20190601:Volume" }, { type: "azurerm:netapp/v20190701:Volume" }, { type: "azurerm:netapp/v20191001:Volume" }, { type: "azurerm:netapp/v20191101:Volume" }, { type: "azurerm:netapp/v20200201:Volume" }, { type: "azurerm:netapp/v20200601:Volume" }] };
        opts = opts ? pulumi.mergeOptions(opts, aliasOpts) : aliasOpts;
        super(Volume.__pulumiType, name, inputs, opts);
    }
    /**
     * Get an existing Volume resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, opts) {
        return new Volume(name, undefined, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of Volume.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Volume.__pulumiType;
    }
}
exports.Volume = Volume;
/** @internal */
Volume.__pulumiType = 'azurerm:netapp/v20190801:Volume';
//# sourceMappingURL=volume.js.map