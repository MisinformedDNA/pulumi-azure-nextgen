"use strict";
// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
const pulumi = require("@pulumi/pulumi");
const utilities = require("../../utilities");
/**
 * Description of an hostingEnvironment (App Service Environment)
 */
class ManagedHostingEnvironment extends pulumi.CustomResource {
    constructor(name, argsOrState, opts) {
        let inputs = {};
        if (!(opts && opts.id)) {
            const args = argsOrState;
            if (!args || args.location === undefined) {
                throw new Error("Missing required property 'location'");
            }
            if (!args || args.name === undefined) {
                throw new Error("Missing required property 'name'");
            }
            if (!args || args.resourceGroupName === undefined) {
                throw new Error("Missing required property 'resourceGroupName'");
            }
            if (!args || args.status === undefined) {
                throw new Error("Missing required property 'status'");
            }
            inputs["allowedMultiSizes"] = args ? args.allowedMultiSizes : undefined;
            inputs["allowedWorkerSizes"] = args ? args.allowedWorkerSizes : undefined;
            inputs["apiManagementAccountId"] = args ? args.apiManagementAccountId : undefined;
            inputs["clusterSettings"] = args ? args.clusterSettings : undefined;
            inputs["databaseEdition"] = args ? args.databaseEdition : undefined;
            inputs["databaseServiceObjective"] = args ? args.databaseServiceObjective : undefined;
            inputs["dnsSuffix"] = args ? args.dnsSuffix : undefined;
            inputs["environmentCapacities"] = args ? args.environmentCapacities : undefined;
            inputs["environmentIsHealthy"] = args ? args.environmentIsHealthy : undefined;
            inputs["environmentStatus"] = args ? args.environmentStatus : undefined;
            inputs["id"] = args ? args.id : undefined;
            inputs["internalLoadBalancingMode"] = args ? args.internalLoadBalancingMode : undefined;
            inputs["ipsslAddressCount"] = args ? args.ipsslAddressCount : undefined;
            inputs["kind"] = args ? args.kind : undefined;
            inputs["lastAction"] = args ? args.lastAction : undefined;
            inputs["lastActionResult"] = args ? args.lastActionResult : undefined;
            inputs["location"] = args ? args.location : undefined;
            inputs["maximumNumberOfMachines"] = args ? args.maximumNumberOfMachines : undefined;
            inputs["multiRoleCount"] = args ? args.multiRoleCount : undefined;
            inputs["multiSize"] = args ? args.multiSize : undefined;
            inputs["name"] = args ? args.name : undefined;
            inputs["networkAccessControlList"] = args ? args.networkAccessControlList : undefined;
            inputs["provisioningState"] = args ? args.provisioningState : undefined;
            inputs["resourceGroup"] = args ? args.resourceGroup : undefined;
            inputs["resourceGroupName"] = args ? args.resourceGroupName : undefined;
            inputs["status"] = args ? args.status : undefined;
            inputs["subscriptionId"] = args ? args.subscriptionId : undefined;
            inputs["suspended"] = args ? args.suspended : undefined;
            inputs["tags"] = args ? args.tags : undefined;
            inputs["type"] = args ? args.type : undefined;
            inputs["upgradeDomains"] = args ? args.upgradeDomains : undefined;
            inputs["vipMappings"] = args ? args.vipMappings : undefined;
            inputs["virtualNetwork"] = args ? args.virtualNetwork : undefined;
            inputs["vnetName"] = args ? args.vnetName : undefined;
            inputs["vnetResourceGroupName"] = args ? args.vnetResourceGroupName : undefined;
            inputs["vnetSubnetName"] = args ? args.vnetSubnetName : undefined;
            inputs["workerPools"] = args ? args.workerPools : undefined;
        }
        if (!opts) {
            opts = {};
        }
        if (!opts.version) {
            opts.version = utilities.getVersion();
        }
        super(ManagedHostingEnvironment.__pulumiType, name, inputs, opts);
    }
    /**
     * Get an existing ManagedHostingEnvironment resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, opts) {
        return new ManagedHostingEnvironment(name, undefined, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of ManagedHostingEnvironment.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ManagedHostingEnvironment.__pulumiType;
    }
}
exports.ManagedHostingEnvironment = ManagedHostingEnvironment;
/** @internal */
ManagedHostingEnvironment.__pulumiType = 'azurerm:web/v20150801:ManagedHostingEnvironment';
//# sourceMappingURL=managedHostingEnvironment.js.map