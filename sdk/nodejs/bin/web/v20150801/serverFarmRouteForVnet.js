"use strict";
// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
const pulumi = require("@pulumi/pulumi");
const utilities = require("../../utilities");
/**
 * VnetRoute contract used to pass routing information for a vnet.
 */
class ServerFarmRouteForVnet extends pulumi.CustomResource {
    constructor(name, argsOrState, opts) {
        let inputs = {};
        if (!(opts && opts.id)) {
            const args = argsOrState;
            if (!args || args.location === undefined) {
                throw new Error("Missing required property 'location'");
            }
            if (!args || args.name === undefined) {
                throw new Error("Missing required property 'name'");
            }
            if (!args || args.resourceGroupName === undefined) {
                throw new Error("Missing required property 'resourceGroupName'");
            }
            if (!args || args.routeName === undefined) {
                throw new Error("Missing required property 'routeName'");
            }
            if (!args || args.vnetName === undefined) {
                throw new Error("Missing required property 'vnetName'");
            }
            inputs["endAddress"] = args ? args.endAddress : undefined;
            inputs["id"] = args ? args.id : undefined;
            inputs["kind"] = args ? args.kind : undefined;
            inputs["location"] = args ? args.location : undefined;
            inputs["name"] = args ? args.name : undefined;
            inputs["resourceGroupName"] = args ? args.resourceGroupName : undefined;
            inputs["routeName"] = args ? args.routeName : undefined;
            inputs["routeType"] = args ? args.routeType : undefined;
            inputs["startAddress"] = args ? args.startAddress : undefined;
            inputs["tags"] = args ? args.tags : undefined;
            inputs["type"] = args ? args.type : undefined;
            inputs["vnetName"] = args ? args.vnetName : undefined;
        }
        if (!opts) {
            opts = {};
        }
        if (!opts.version) {
            opts.version = utilities.getVersion();
        }
        const aliasOpts = { aliases: [{ type: "azurerm:web/v20160901:ServerFarmRouteForVnet" }, { type: "azurerm:web/v20180201:ServerFarmRouteForVnet" }, { type: "azurerm:web/v20190801:ServerFarmRouteForVnet" }, { type: "azurerm:web/v20200601:ServerFarmRouteForVnet" }] };
        opts = opts ? pulumi.mergeOptions(opts, aliasOpts) : aliasOpts;
        super(ServerFarmRouteForVnet.__pulumiType, name, inputs, opts);
    }
    /**
     * Get an existing ServerFarmRouteForVnet resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, opts) {
        return new ServerFarmRouteForVnet(name, undefined, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of ServerFarmRouteForVnet.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ServerFarmRouteForVnet.__pulumiType;
    }
}
exports.ServerFarmRouteForVnet = ServerFarmRouteForVnet;
/** @internal */
ServerFarmRouteForVnet.__pulumiType = 'azurerm:web/v20150801:ServerFarmRouteForVnet';
//# sourceMappingURL=serverFarmRouteForVnet.js.map