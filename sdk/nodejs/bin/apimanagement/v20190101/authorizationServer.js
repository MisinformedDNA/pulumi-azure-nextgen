"use strict";
// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
const pulumi = require("@pulumi/pulumi");
const utilities = require("../../utilities");
/**
 * External OAuth authorization server settings.
 */
class AuthorizationServer extends pulumi.CustomResource {
    constructor(name, argsOrState, opts) {
        let inputs = {};
        if (!(opts && opts.id)) {
            const args = argsOrState;
            if (!args || args.authorizationEndpoint === undefined) {
                throw new Error("Missing required property 'authorizationEndpoint'");
            }
            if (!args || args.authsid === undefined) {
                throw new Error("Missing required property 'authsid'");
            }
            if (!args || args.clientId === undefined) {
                throw new Error("Missing required property 'clientId'");
            }
            if (!args || args.clientRegistrationEndpoint === undefined) {
                throw new Error("Missing required property 'clientRegistrationEndpoint'");
            }
            if (!args || args.displayName === undefined) {
                throw new Error("Missing required property 'displayName'");
            }
            if (!args || args.grantTypes === undefined) {
                throw new Error("Missing required property 'grantTypes'");
            }
            if (!args || args.resourceGroupName === undefined) {
                throw new Error("Missing required property 'resourceGroupName'");
            }
            if (!args || args.serviceName === undefined) {
                throw new Error("Missing required property 'serviceName'");
            }
            inputs["authorizationEndpoint"] = args ? args.authorizationEndpoint : undefined;
            inputs["authorizationMethods"] = args ? args.authorizationMethods : undefined;
            inputs["authsid"] = args ? args.authsid : undefined;
            inputs["bearerTokenSendingMethods"] = args ? args.bearerTokenSendingMethods : undefined;
            inputs["clientAuthenticationMethod"] = args ? args.clientAuthenticationMethod : undefined;
            inputs["clientId"] = args ? args.clientId : undefined;
            inputs["clientRegistrationEndpoint"] = args ? args.clientRegistrationEndpoint : undefined;
            inputs["clientSecret"] = args ? args.clientSecret : undefined;
            inputs["defaultScope"] = args ? args.defaultScope : undefined;
            inputs["description"] = args ? args.description : undefined;
            inputs["displayName"] = args ? args.displayName : undefined;
            inputs["grantTypes"] = args ? args.grantTypes : undefined;
            inputs["resourceGroupName"] = args ? args.resourceGroupName : undefined;
            inputs["resourceOwnerPassword"] = args ? args.resourceOwnerPassword : undefined;
            inputs["resourceOwnerUsername"] = args ? args.resourceOwnerUsername : undefined;
            inputs["serviceName"] = args ? args.serviceName : undefined;
            inputs["supportState"] = args ? args.supportState : undefined;
            inputs["tokenBodyParameters"] = args ? args.tokenBodyParameters : undefined;
            inputs["tokenEndpoint"] = args ? args.tokenEndpoint : undefined;
            inputs["name"] = undefined /*out*/;
            inputs["type"] = undefined /*out*/;
        }
        if (!opts) {
            opts = {};
        }
        if (!opts.version) {
            opts.version = utilities.getVersion();
        }
        const aliasOpts = { aliases: [{ type: "azurerm:apimanagement/v20160707:AuthorizationServer" }, { type: "azurerm:apimanagement/v20161010:AuthorizationServer" }, { type: "azurerm:apimanagement/v20170301:AuthorizationServer" }, { type: "azurerm:apimanagement/v20180101:AuthorizationServer" }, { type: "azurerm:apimanagement/v20191201:AuthorizationServer" }] };
        opts = opts ? pulumi.mergeOptions(opts, aliasOpts) : aliasOpts;
        super(AuthorizationServer.__pulumiType, name, inputs, opts);
    }
    /**
     * Get an existing AuthorizationServer resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, opts) {
        return new AuthorizationServer(name, undefined, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of AuthorizationServer.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === AuthorizationServer.__pulumiType;
    }
}
exports.AuthorizationServer = AuthorizationServer;
/** @internal */
AuthorizationServer.__pulumiType = 'azurerm:apimanagement/v20190101:AuthorizationServer';
//# sourceMappingURL=authorizationServer.js.map