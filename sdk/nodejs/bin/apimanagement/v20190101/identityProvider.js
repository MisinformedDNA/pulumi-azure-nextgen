"use strict";
// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
const pulumi = require("@pulumi/pulumi");
const utilities = require("../../utilities");
/**
 * Identity Provider details.
 */
class IdentityProvider extends pulumi.CustomResource {
    constructor(name, argsOrState, opts) {
        let inputs = {};
        if (!(opts && opts.id)) {
            const args = argsOrState;
            if (!args || args.clientId === undefined) {
                throw new Error("Missing required property 'clientId'");
            }
            if (!args || args.clientSecret === undefined) {
                throw new Error("Missing required property 'clientSecret'");
            }
            if (!args || args.identityProviderName === undefined) {
                throw new Error("Missing required property 'identityProviderName'");
            }
            if (!args || args.resourceGroupName === undefined) {
                throw new Error("Missing required property 'resourceGroupName'");
            }
            if (!args || args.serviceName === undefined) {
                throw new Error("Missing required property 'serviceName'");
            }
            inputs["allowedTenants"] = args ? args.allowedTenants : undefined;
            inputs["authority"] = args ? args.authority : undefined;
            inputs["clientId"] = args ? args.clientId : undefined;
            inputs["clientSecret"] = args ? args.clientSecret : undefined;
            inputs["identityProviderName"] = args ? args.identityProviderName : undefined;
            inputs["passwordResetPolicyName"] = args ? args.passwordResetPolicyName : undefined;
            inputs["profileEditingPolicyName"] = args ? args.profileEditingPolicyName : undefined;
            inputs["resourceGroupName"] = args ? args.resourceGroupName : undefined;
            inputs["serviceName"] = args ? args.serviceName : undefined;
            inputs["signinPolicyName"] = args ? args.signinPolicyName : undefined;
            inputs["signinTenant"] = args ? args.signinTenant : undefined;
            inputs["signupPolicyName"] = args ? args.signupPolicyName : undefined;
            inputs["type"] = args ? args.type : undefined;
            inputs["name"] = undefined /*out*/;
        }
        if (!opts) {
            opts = {};
        }
        if (!opts.version) {
            opts.version = utilities.getVersion();
        }
        const aliasOpts = { aliases: [{ type: "azurerm:apimanagement/v20160707:IdentityProvider" }, { type: "azurerm:apimanagement/v20161010:IdentityProvider" }, { type: "azurerm:apimanagement/v20170301:IdentityProvider" }, { type: "azurerm:apimanagement/v20180101:IdentityProvider" }, { type: "azurerm:apimanagement/v20191201:IdentityProvider" }] };
        opts = opts ? pulumi.mergeOptions(opts, aliasOpts) : aliasOpts;
        super(IdentityProvider.__pulumiType, name, inputs, opts);
    }
    /**
     * Get an existing IdentityProvider resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, opts) {
        return new IdentityProvider(name, undefined, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of IdentityProvider.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === IdentityProvider.__pulumiType;
    }
}
exports.IdentityProvider = IdentityProvider;
/** @internal */
IdentityProvider.__pulumiType = 'azurerm:apimanagement/v20190101:IdentityProvider';
//# sourceMappingURL=identityProvider.js.map